module.exports = function (grunt) {
    'use strict';

    require('load-grunt-tasks')(grunt);

    grunt.initConfig({
        pkg: grunt.file.readJSON('package.json'),

        notify: {
            build: {
                options: {
                    message: 'Build completed successfully.'
                }
            }
        },

        browserify: {
            options: {
                browserifyOptions: {
                    debug: true
                }
            },
            dist: {
                files: {
                    'public/js/application.js': ['app/js/index.js']
                },
                options: {
                    transform: [
                        ['babelify', {
                            stage: 0
                        }]
                    ]
                }
            }
        },

        'http-server': {
            dev: {
                root: 'public',
                port: 8282,
                host: '0.0.0.0',
                runInBackground: true,
                logFn: function (req, res, error) {
                    console.log('Request for ' + req.url);
                }
            }
        },

        sass: {
            options: {
                sourceMap: true
            },
            dist: {
                files: {
                    'public/css/styles.css': 'app/styles/index.scss'
                }
            }
        },

        uglify: {
            my_target: {
                files: {
                    'public/js/application.js': ['public/js/application.js']
                },
                options: {
                    sourceMap: true
                }
            }
        },

        cachebreaker: {
            options: {
                match: ['js/application.js', 'css/style.css']
            },
            files: {
                src: ['public/index.html']
            }
        },

        jshint: {
            files: ['app/js/**/*.js'],
            options: {
                browser: true,
                browserify: true,
                esnext: true,
                globals: {
                    console: false
                }
            }
        },
        
        watch: {
            dev: {
                files: ['Gruntfile.js', 'app/**/*'],
                tasks: ['build:dev']
            },
            prod: {
                files: ['Gruntfile.js', 'app/**/*'],
                tasks: ['build:prod']
            }
        },

        copy: {
            images: {
                cwd: 'app/',
                src: ['img', 'img/**'],
                expand: true,
                dest: 'public/'
            },
            index: {
                cwd: 'app/',
                src: ['index.html'],
                expand: true,
                dest: 'public/'
            }
        },

        clean: ['public/**/*']

    });

    grunt.registerTask('precompile', 'Precompile handlebars templates', function () {
        var fs = require('fs');
        var glob = require('glob');
        var Handlebars = require('handlebars');

        var output = "/* !!! <<< WARNING: This file is generated by a grunt task, do not edit >>> !!! */\n\n";
        output    += "var Handlebars = require('handlebars/runtime');\n\n";
        output    += "module.exports = {};\n";

        glob('app/templates/**/*.hbt', {sync: true}).forEach(function (path) {
            var html = fs.readFileSync(path, {encoding: 'utf-8'});
            var spec = Handlebars.precompile(html);

            output += "module.exports['" + path.replace(/app\/|templates\/|.hbt/g, '') + "'] = Handlebars.template(" + spec + ");\n\n";
        });

        fs.writeFileSync('app/templates/templates.js', output, {encoding: 'utf-8'});
    });

    grunt.registerTask('build', function (env) {
        grunt.task.run('jshint');
        grunt.task.run('clean');
        grunt.task.run('precompile');
        grunt.task.run('browserify');
        grunt.task.run('sass');
        grunt.task.run('copy:images');
        grunt.task.run('copy:index');

        if (env !== 'dev') {
            grunt.task.run('uglify');
            grunt.task.run('cachebreaker');
        }

        grunt.task.run('notify:build');
    });

    grunt.registerTask('start', start);
    grunt.registerTask('s', start);

    function start (env, port) {
        env = env === 'prod' ? env : 'dev';
        grunt.task.run('build:' + env);
        grunt.task.run('http-server');
        grunt.task.run('watch:' + env);
    }
};